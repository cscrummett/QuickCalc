# Beam Designer Development Plan

## Stage 0: Project Setup
**Goal**: Set up JavaFX project with build tools and dependencies

### Tasks:
- [DONE] Create new Gradle project structure
- [DONE] Add `build.gradle` with JavaFX dependencies
- [DONE] Add Jackson JSON library for Python communication
- [DONE] Set up basic directory structure:
  ```
  src/main/java/com/beamdesigner/
  src/main/resources/
  src/test/java/
  ```
- [DONE] Test that JavaFX runs with simple "Hello World" window
- [DONE] Configure IDE for JavaFX development

**Success Criteria**: Can run a basic JavaFX window

---

## Stage 1: Basic Window + Static Beam Drawing
**Goal**: Get a window open with a beam drawn on it

### Files to Create:
- [DONE] `Main.java` - JavaFX application entry point
- [DONE] `models/BeamModel.java` - Simple beam data (just length for now)
- [DONE] `views/components/BeamCanvas.java` - Canvas that draws a horizontal line
- [DONE] `src/main/resources/fxml/main-view.fxml` - Basic window layout
- [DONE] `controllers/MainController.java` - Connects FXML to canvas

### Tasks:
- [DONE] Create JavaFX Application class with primary stage setup
- [DONE] Create BeamModel with basic properties (length, maybe material)
- [DONE] Create BeamCanvas extending Canvas with basic drawing
- [DONE] Create FXML layout with canvas in center
- [DONE] Wire controller to load FXML and initialize canvas
- [DONE] Draw simple horizontal line representing beam

**Success Criteria**: Window opens showing a horizontal line (beam)

---

## Stage 2: Add Coordinate System
**Goal**: Proper engineering coordinates with zoom/pan capability

### Files to Add:
- [DONE] `utils/Point2D.java` - Basic geometric point class
- [DONE] `utils/ViewTransform.java` - Coordinate conversion between screen/engineering
- [DONE] `utils/CoordinateConverter.java` - Helper utilities

### Files to Modify:
- [DONE] `BeamCanvas.java` - Integrate ViewTransform for all drawing operations
- [DONE] Add mouse event handlers for zoom (scroll) and pan (mouse wheel-click drag)

### Tasks:
- [DONE] Implement Point2D with basic vector operations
- [DONE] Implement ViewTransform with screen ↔ engineering conversion
- [DONE] Handle Y-axis flip (engineering Y+ up, screen Y+ down)
- [DONE] Add zoom functionality centered on mouse cursor
- [DONE] Add pan functionality with mouse wheel-click drag
- [DONE] Auto-fit beam to canvas with padding
- [DONE] Test coordinate system accuracy

**Success Criteria**: Same visual result, but can zoom/pan smoothly

---

## Stage 3: Add Static Supports and Loads
**Goal**: Draw supports and loads at fixed positions

### Files to Add:
- [DONE] `models/Support.java` - Support data model (position, type)
- [DONE] `models/Load.java` - Load data model (position, magnitude, type)
- [DONE] `constants/BeamConstants.java` - Engineering constants
- [DONE] `constants/UIConstants.java` - Display constants (colors, sizes)

### Files to Modify:
- [DONE] `BeamModel.java` - Add collections for supports and loads
- [DONE] `BeamCanvas.java` - Add drawing methods for supports and loads

### Tasks:
- [DONE] Define Support types (pinned, roller, fixed)
- [DONE] Define Load types (point, UDL, triangular)
- [DONE] Create drawing methods for each support type symbol
- [DONE] Create drawing methods for each load type (arrows, distributed loads)
- [DONE] Add sample supports and loads to BeamModel for testing
- [DONE] Implement proper scaling of symbols based on zoom level

**Success Criteria**: Shows beam with pre-defined supports and loads

---

## Stage 4: Interactive Load Editing via Dimension Lines (No Free Drag)

Goal: Enable engineers to precisely control load positions and spans using dimension lines. Free dragging is disabled in favor of deterministic, editable dimensioning tied to supports.

### Files to Add:
- [ ] views/components/InteractiveElement.java – Base for all selectable beam elements (supports, loads).
- [ ] views/components/LoadMarker.java – Represents point or distributed loads with editable dimensions.
- [ ] views/components/SupportMarker.java – Visual marker for pinned, roller, or fixed supports.
- [ ] views/components/DimensionLine.java – Render logic for both editable and static dimensions.
- [ ] views/components/SupportSpanDimension.java – Non-editable dimension line from support-to-support (or support to edge for cantilevers).
- [ ] keyboard/DimensionNavigationManager.java – Handles TAB navigation through editable dimensions.
- [ ] exceptions/InvalidBeamException.java – For invalid positions or overlapping logic.

### Files to Modify:
- [ ] BeamCanvas.java  
    - Draw three dimension layers:
        - Temporary editable (hover) – Above beam.
        - Permanent load snapping (non-editable) – Below beam.
        - Support-to-support spans (non-editable) – Below all dimensions.
    - Manage element selection, keyboard navigation, and edit updates.
- [ ] Beam model classes – Add logic to support snapping, dimension labels, and length calculations.

### Dimension Layers Overview:
1. **Temporary Editable Dimensions (Top)**  
    - Visible on hover only.  
    - Show:
        - Distance from nearest support (for point or distributed loads).
        - Width (for distributed loads).
    - Editable via `TAB` and `Enter`.

2. **Permanent Load Dimensions (Middle, Below Beam)**  
    - Always visible.  
    - Snap from support to:
        - Point load.
        - Left/right edges of distributed load.  
    - Non-editable — display only.

3. **Permanent Span Dimensions (Bottom Row)**  
    - Always visible.  
    - Show distances:
        - Support to support (for spans).
        - Support to beam end (if cantilever).
    - Non-editable and styled as a drafting reference grid.

### Interaction Model:

- **Hovering**  
    - Shows temporary editable dimension lines above the beam.  
    - Highlighted dimension is bold or colored.  
    - `TAB` cycles between:
        - Support-to-load distance (left to right).
        - Width for distributed loads.

- **Selecting**  
    - Clicking a load/support permanently highlights it.  
    - Activates inline editing for associated dimension lines (top only).  
    - Properties (e.g., magnitude, load case) become editable via panel or popover.

- **Editing**  
    - Active dimension → click or `Enter` opens editable `TextField`.  
    - On input change:
        - Updates load location or width.
        - Snaps to nearest 0.01 ft (or user-defined resolution).
        - Validates position against beam/support limits.

### Constraints & Validation:
- [ ] Loads may overlap (e.g., 1k dead + 0.5k live at same location).
- [ ] No positions beyond beam ends or inside support zones.
- [ ] Distributed loads must have width > 0.5 ft and fit within beam.

### Success Criteria:
- Hovering shows editable dimension overlays with `TAB`/`Enter` navigation.
- Permanent dimension system is always visible and reflects structural layout.
- Support span dimensions clearly show beam framing (and cantilever extents).
- Engineers can confidently locate and size loads visually with no ambiguity.

---

## Stage 5: Add Input Forms
**Goal**: Properties panel for precise input and element selection

### Files to Add:
- [ ] `src/main/resources/fxml/properties-panel.fxml` - Input form layout
- [ ] `controllers/PropertiesController.java` - Form controller
- [ ] `views/dialogs/LoadPropertiesDialog.java` - Detailed load editing
- [ ] `views/dialogs/SupportPropertiesDialog.java` - Detailed support editing

### Files to Modify:
- [ ] `src/main/resources/fxml/main-view.fxml` - Add properties panel to layout
- [ ] `controllers/MainController.java` - Connect form to beam model
- [ ] `BeamCanvas.java` - Add element selection highlighting

### Tasks:
- [ ] Create properties panel with input fields
- [ ] Implement two-way data binding between forms and model
- [ ] Add element selection (click to select, highlight selected)
- [ ] Show selected element properties in panel
- [ ] Allow adding new loads/supports through forms
- [ ] Add delete functionality for selected elements
- [ ] Form validation for engineering constraints

**Success Criteria**: Forms update when selecting elements, changes reflect in drawing

---

## Stage 6: Backend Integration
**Goal**: Connect to Python analysis engine

### Files to Add:
- [ ] `services/BeamAnalysisService.java` - Python subprocess communication
- [ ] `models/BeamResults.java` - Analysis results data model
- [ ] `models/AnalysisResponse.java` - JSON response wrapper
- [ ] `beam_analyzer.py` - Python script wrapper for your existing code
- [ ] `exceptions/BeamAnalysisException.java` - Backend communication errors

### Files to Modify:
- [ ] Add analysis triggers to UI interactions
- [ ] Add loading indicators during analysis

### Tasks:
- [ ] Design JSON schema for beam data exchange
- [ ] Implement subprocess communication with Python
- [ ] Create Python wrapper script for your existing analysis code
- [ ] Add error handling for backend failures
- [ ] Implement async analysis to keep UI responsive
- [ ] Add progress indicators for long calculations
- [ ] Cache results to avoid redundant calculations

**Success Criteria**: Analysis runs when beam changes, basic results returned

---

## Stage 7: Results Display
**Goal**: Show calculation results and diagrams

### Files to Add:
- [ ] `src/main/resources/fxml/results-panel.fxml` - Results layout
- [ ] `controllers/ResultsController.java` - Results display controller
- [ ] `views/components/DiagramCanvas.java` - For shear/moment diagrams

### Files to Modify:
- [ ] `src/main/resources/fxml/main-view.fxml` - Add results panel
- [ ] `controllers/MainController.java` - Connect results to analysis

### Tasks:
- [ ] Display numerical results (max moment, deflection, reactions)
- [ ] Draw shear force diagram
- [ ] Draw bending moment diagram
- [ ] Add diagram interaction (hover for values)
- [ ] Color coding for critical values
- [ ] Export results to PDF/image
- [ ] Add units display and conversion

**Success Criteria**: Complete analysis results with diagrams

---

## Stage 8: File Operations
**Goal**: Save/load beam designs

### Files to Add:
- [ ] `services/FileService.java` - File I/O operations
- [ ] `models/ProjectFile.java` - Project file format definition

### Files to Modify:
- [ ] Add file menu to main window
- [ ] Add project state management

### Tasks:
- [ ] Implement save/load in JSON format
- [ ] Add "New", "Open", "Save", "Save As" menu items
- [ ] Track unsaved changes
- [ ] Add recent files list
- [ ] Export beam diagram as image
- [ ] Import/export to common structural formats (if needed)

**Success Criteria**: Can save and reload complete beam designs

---

## Stage 9: Polish & Advanced Features
**Goal**: Professional finish and advanced functionality

### Advanced Features:
- [ ] Multi-span beam support
- [ ] Material property database
- [ ] Beam section database
- [ ] Advanced load types (moving loads, etc.)
- [ ] Design code checks
- [ ] Reporting system
- [ ] Undo/Redo functionality
- [ ] Keyboard shortcuts
- [ ] Tooltips and help system

### Polish:
- [ ] Modern UI styling (Tableau-like appearance)
- [ ] Smooth animations
- [ ] Professional icons
- [ ] Comprehensive error messages
- [ ] Performance optimization
- [ ] Memory usage optimization
- [ ] Comprehensive testing
- [ ] Documentation

**Success Criteria**: Production-ready application

---