# QuickCalc Project Structure

```
QuickCalc/
├── build.gradle                           # Build configuration and dependencies
├── QuickCalc_DevelopmentGuidelines/      # Project documentation
│   ├── QuickCalc_PRD.markdown
│   ├── QuickCalc_ToDoList.markdown
│   └── ProjectStructure.dir
├── assets/                               # Static assets and test files
├── backend/                              # Python analysis backend
│   ├── __init__.py
│   ├── app.py
│   ├── data.py
│   ├── fea.py
│   └── load_combinations.py
├── frontend/                             # Frontend development plans
├── javafx-sdk-17.0.2/                  # JavaFX SDK
├── package.json                         # Node.js dependencies (legacy)
├── requirements.txt                     # Python dependencies
├── run_app.bat                          # Windows batch script to run
├── setup.py                            # Python setup script
├── tests/                               # Python tests
└── src/
    ├── main/
    │   ├── java/com/quickcalc/
    │   │   ├── Main.java                 # Application entry point
    │   │   │
    │   │   ├── controllers/              # FXML Controllers
    │   │   │   └── MainController.java
    │   │   ├── models/                   # Data Models
    │   │   │   ├── BeamModel.java
    │   │   │   ├── Load.java
    │   │   │   └── Support.java
    │   │   │
    │   │   ├── views/components/         # UI Components
    │   │   │   ├── BeamCanvas.java
    │   │   │   ├── ClickableDimensionText.java
    │   │   │   ├── DimensionLineDrawer.java
    │   │   │   ├── InteractiveElement.java
    │   │   │   ├── LoadMarker.java
    │   │   │   └── SupportMarker.java
    │   │   │
    │   │   │
    │   │   ├── utils/                    # Utility Classes
    │   │   │   ├── Point2D.java
    │   │   │   ├── ViewTransform.java
    │   │   │   └── CoordinateConverter.java
    │   │   │
    │   │   ├── constants/                # Application Constants
    │   │   │   ├── BeamConstants.java
    │   │   │   └── UIConstants.java
    │   │   │
    │   │   └── module-info.java          # Java module definition
    │   │
    │   └── resources/                    # Application Resources
    │       └── fxml/                           # FXML Layout Files
    │           └── main-view.fxml              # Main application window
    │
    └── test/                             # Test Code
        └── java/com/quickcalc/
            └── LoadRenderingTest.java            # Current test file
```

## Key Design Principles

### 1. **MVC Architecture**
- **Models**: Pure data classes with business logic
- **Views**: UI components and FXML files
- **Controllers**: Mediate between models and views

### 2. **Package Organization**
- **Functional grouping**: Related classes grouped by function
- **Separation of concerns**: Each package has a single responsibility
- **Clear dependencies**: Lower-level utilities, higher-level controllers

### 3. **Resource Management**
- **FXML**: All layouts in dedicated directory
- **CSS**: Modular styling with theme support
- **Icons**: Organized by function and type
- **Data**: Static configuration separate from code

### 4. **Testing Structure**
- **Mirrors main structure**: Easy to find corresponding tests
- **Unit tests**: For individual classes
- **Integration tests**: For cross-component functionality
- **Test resources**: Sample data for testing

### 5. **Python Integration**
- **Embedded scripts**: Python files within Java resources
- **Requirements management**: Dependencies clearly specified
- **Modular design**: Your existing Python code can be dropped in

### 6. **Scalability Considerations**
- **Plugin architecture**: Easy to add new load types, analysis methods
- **Theme support**: Multiple visual themes
- **Internationalization ready**: Resource-based strings
- **Database ready**: Service layer for future database integration

## Current Implementation Status

**Completed Components:**
- Basic JavaFX application structure with Main.java entry point
- Core models: BeamModel, Load, Support with basic properties
- Interactive canvas with coordinate system and zoom/pan functionality  
- Visual components for drawing beams, supports, and loads
- Utility classes for coordinate conversion and geometry
- Python backend with FEA analysis capabilities

**In Development:**
- Interactive dimension editing system
- Properties panels and input forms
- Results display and diagram rendering
- Python-Java integration via subprocess communication

This structure supports both the current development state and planned future enhancements, following JavaFX and Java best practices.